// Generated by CoffeeScript 1.9.1
(function() {
  this.D3Line = (function() {
    function D3Line(polymerthis) {
      this.polymerthis = polymerthis;
    }

    D3Line.prototype._init_variable = function() {
      this.dataset1 = this.polymerthis.data1;
      this.dataset2 = this.polymerthis.data2;
      this.visualization = d3.select(this.polymerthis.$.visualisation);
      this.container = d3.select(this.polymerthis.$.svgcontainer);
      this.width = window.outerWidth * 0.5;
      this.height = 500;
      this.margins = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 50
      };
      return this.bisectDate = d3.bisector(function(d) {
        return d.year;
      }).left;
    };

    D3Line.prototype.draw = function() {
      this._set_scale();
      this._set_axis();
      this._set_tooltip();
      return this._draw_line();
    };

    D3Line.prototype._set_tooltip = function() {
      var _this;
      _this = this;
      this.focus = this.visualization.append("g").attr("class", "focus").style("display", "none");
      this.focus.append("circle").attr("r", 4.5);
      this.focus.append("text").attr("x", 9).attr("dy", ".35em");
      return this.visualization.append("rect").attr("class", "overlay").attr("width", this.width).attr("height", this.height).on("mouseover", function() {
        return _this.focus.style("display", null);
      }).on("mouseout", function() {
        return _this.focus.style("display", "none");
      }).on("mousemove", function() {
        var d, i, x0;
        x0 = _this.xScale.invert(d3.mouse(this)[0]);
        i = _this.bisectDate(_this.dataset1, x0, 1);
        d = _this.dataset1[i - 1];
        _this.focus.attr("transform", "translate(" + _this.xScale(d.year) + "," + _this.yScale(d.sale) + ")");
        return _this.focus.select("text").text(d.year + ',' + d.sale);
      });
    };

    D3Line.prototype._set_scale = function() {
      this.xScale = d3.scale.linear().range([this.margins.left, this.width - this.margins.right]).domain([2000, 2010]);
      return this.yScale = d3.scale.linear().range([this.height - this.margins.top, this.margins.bottom]).domain([134, 215]);
    };

    D3Line.prototype._set_axis = function() {
      this._set_axis_scale();
      this.xaxis = this.visualization.append("svg:g").attr("class", "axis").attr("transform", "translate(0," + (this.height - this.margins.bottom) + ")");
      this.yaxis = this.visualization.append("svg:g").attr("class", "axis").attr("transform", "translate(" + this.margins.left + ",0)");
      return this._call_axis();
    };

    D3Line.prototype._call_axis = function() {
      this.xaxis.call(this.xAxis);
      return this.yaxis.call(this.yAxis);
    };

    D3Line.prototype._set_axis_scale = function() {
      this.xAxis = d3.svg.axis().scale(this.xScale);
      return this.yAxis = d3.svg.axis().scale(this.yScale).orient("left");
    };

    D3Line.prototype._draw_line = function() {
      var lineGen;
      lineGen = this._getlineGen();
      this.dataset1line = this.visualization.append('svg:path').attr('stroke', 'green').attr('stroke-width', 2).attr('fill', 'none').attr('d', lineGen(this.dataset1));
      this.dataset2line = this.visualization.append('svg:path').attr('stroke', 'blue').attr('stroke-width', 2).attr('fill', 'none').attr('d', lineGen(this.dataset2));
      this.totalLength1 = this.dataset1line.node().getTotalLength();
      this.totalLength2 = this.dataset2line.node().getTotalLength();
      return this._animatePath();
    };

    D3Line.prototype._animatePath = function() {
      this.dataset1line.attr("stroke-dasharray", this.totalLength1 + " " + this.totalLength1).attr("stroke-dashoffset", this.totalLength1).transition().duration(1000).ease("linear").attr("stroke-dashoffset", 0);
      return this.dataset2line.attr("stroke-dasharray", this.totalLength2 + " " + this.totalLength2).attr("stroke-dashoffset", this.totalLength2).transition().duration(1000).ease("linear").attr("stroke-dashoffset", 0);
    };

    D3Line.prototype._setdata = function(lineGen) {
      this.dataset1line.transition().duration(800).attr('d', lineGen(this.dataset1));
      return this.dataset2line.transition().duration(800).attr('d', lineGen(this.dataset2));
    };

    D3Line.prototype._getlineGen = function() {
      var _this;
      _this = this;
      return d3.svg.line().x(function(d) {
        return _this.xScale(d.year);
      }).y(function(d) {
        return _this.yScale(d.sale);
      });
    };

    D3Line.prototype._setresponsive = function() {
      var lineGen;
      this._set_scale();
      this._set_axis_scale();
      this._call_axis();
      lineGen = this._getlineGen();
      return this._setdata(lineGen);
    };

    return D3Line;

  })();

}).call(this);

//# sourceMappingURL=d3line.js.map
