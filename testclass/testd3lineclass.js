// Generated by CoffeeScript 1.9.1
(function() {
  var data1, data2, render;

  describe("TEST D3line class", function() {
    beforeEach(function() {
      render();
      this.visualisation = document.querySelector('.d3linesvg');
      return this.d3line = new D3Line(this.visualisation, data1, data2);
    });
    describe('set data', function() {
      it('visualization is setted', function() {
        return assert(this.d3line.visualization !== void 0);
      });
      it("width is set with right data", function() {
        var result;
        result = this.d3line.width;
        return assert.equal(result, 500);
      });
      it("height is set with right data", function() {
        var result;
        result = this.d3line.height;
        return assert.equal(result, 500);
      });
      it("margin is set", function() {
        var topmargin;
        topmargin = this.d3line.margins.top;
        return assert.equal(topmargin, 20);
      });
      return it("data is set", function() {
        var dataset1, dataset2;
        dataset1 = this.d3line.dataset1;
        dataset2 = this.d3line.dataset2;
        assert.equal(dataset1[0].year, 2000);
        return assert.equal(dataset2[0].year, 2000);
      });
    });
    describe('draw', function() {
      return it('method is called', function() {
        var mock;
        mock = sinon.mock(this.d3line);
        mock.expects('_set_axis').once();
        mock.expects('_set_scale').once();
        mock.expects('_draw_line').once();
        mock.expects('_getLineData1').once();
        mock.expects('_getLineData2').once();
        mock.expects('_animatePath').once();
        this.d3line.draw();
        mock.verify();
        return mock.restore();
      });
    });
    describe('_set_scale', function() {
      beforeEach(function() {
        return this.d3line._set_scale();
      });
      it('set xScale', function() {
        assert.equal(this.d3line.xScale(2000), this.d3line.margins.left);
        assert.equal(this.d3line.xScale(2010), this.d3line.width - this.d3line.margins.right);
        return assert.equal(this.d3line.xScale(2004), 222);
      });
      return it('set yScale', function() {
        assert(this.d3line.yScale(134) === this.d3line.height - this.d3line.margins.bottom);
        return assert(this.d3line.yScale(215) === this.d3line.margins.top);
      });
    });
    describe('_set_axis', function() {
      it('method is called', function() {
        var mock;
        mock = sinon.mock(this.d3line);
        mock.expects('_set_axis_scale').once();
        mock.expects('_call_axis').once();
        this.d3line._set_axis();
        mock.verify();
        return mock.restore();
      });
      it('set xaxis', function() {
        var mock, result;
        mock = sinon.mock(this.d3line);
        mock.expects('_call_axis').once().returns(1);
        this.d3line._set_axis();
        result = d3.select('.x.axis').attr('transform');
        assert.equal(result, 'translate(0,480)');
        mock.verify();
        return mock.restore();
      });
      return it('set yaxis', function() {
        var mock, result;
        mock = sinon.mock(this.d3line);
        mock.expects('_call_axis').once().returns(1);
        this.d3line._set_axis();
        result = d3.select('.y.axis').attr('transform');
        assert.equal(result, 'translate(50,0)');
        mock.verify();
        return mock.restore();
      });
    });
    describe('_setresponsive', function() {
      it('call method', function() {
        var mock;
        mock = sinon.mock(this.d3line);
        mock.expects('_set_scale').once();
        mock.expects('_set_axis_scale').once();
        mock.expects('_call_axis').once();
        mock.expects('_updataLineData').once();
        mock.expects('_getLineData1').once();
        mock.expects('_getLineData2').once();
        mock.expects('_updateAnimate').once();
        this.d3line._setresponsive();
        mock.verify();
        return mock.restore();
      });
      it('_updataLineData', function() {
        this.d3line.draw();
        this.d3line._updataLineData(1, 1);
        return assert.equal(this.d3line.dataset1line.attr('d'), '1');
      });
      return it('_updateAnimate', function() {
        this.d3line.draw();
        this.d3line._updateAnimate();
        assert.equal(this.d3line.dataset1line.attr('stroke-dasharray'), 0);
        assert.equal(this.d3line.dataset2line.attr('stroke-dasharray'), 0);
        assert.equal(this.d3line.dataset1line.attr('stroke-dashoffset'), 0);
        return assert.equal(this.d3line.dataset2line.attr('stroke-dashoffset'), 0);
      });
    });
    describe('_draw_line', function() {
      it('dataset1line', function() {
        this.d3line._set_scale();
        this.d3line._draw_line(1, 2);
        return assert.equal(this.d3line.dataset1line.attr('fill'), 'none');
      });
      it('_getLineData1', function() {
        var result;
        this.d3line._set_scale();
        result = this.d3line._getLineData1();
        return assert.equal(result, 'M50,480');
      });
      return it('_getLineData2', function() {
        var result;
        this.d3line._set_scale();
        result = this.d3line._getLineData2();
        return assert.equal(result, 'M50,480');
      });
    });
    return describe('_animatePath', function() {
      return it('_getLine1TotalLength', function() {
        var mock;
        mock = sinon.mock(this.d3line);
        mock.expects('_getLine1TotalLength').once().returns(1);
        mock.expects('_getLine2TotalLength').once().returns(1);
        this.d3line._set_scale();
        this.d3line._draw_line();
        this.d3line._animatePath();
        mock.verify();
        return mock.restore();
      });
    });
  });

  render = function() {
    var svg;
    return svg = d3.select('body').append('svg').attr('class', 'd3linesvg').attr('height', '500').attr('width', '500');
  };

  data1 = [
    {
      year: 2000,
      sale: 134
    }
  ];

  data2 = [
    {
      year: 2000,
      sale: 134
    }
  ];

}).call(this);

//# sourceMappingURL=testd3lineclass.js.map
